{"version":3,"sources":["../src/getFiles.js"],"names":["getFiles","fromPath","exclude","files","map","p","substr","length","filter","every","file","join","excluded","dot"],"mappings":";;;;;kBAIwBA,Q;;AAJxB;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,QAAT,CAAkBC,QAAlB,EAA0C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACvD,MAAMC,QAAQ,oCAAkBF,QAAlB,EACXG,GADW,CACP;AAAA,WAAKC,EAAEC,MAAF,CAASL,SAASM,MAAT,GAAkB,CAA3B,CAAL;AAAA,GADO,EAC6B;AAD7B,GAEXC,MAFW,CAEJ;AAAA,WACNN,QAAQO,KAAR,CAAc;AAAA,aACZ,CAAC,yBAAUC,IAAV,EAAgB,eAAKC,IAAL,CAAUC,QAAV,CAAhB,EAAqC,EAAEC,KAAK,IAAP,EAArC,CADW;AAAA,KAAd,CADM;AAAA,GAFI,EAOXT,GAPW,CAOP;AAAA,WAAWH,QAAX,SAAuBS,IAAvB;AAAA,GAPO,CAAd;AAQA,SAAOP,KAAP;AACD","file":"getFiles.js","sourcesContent":["import recursiveReadSync from 'recursive-readdir-sync';\nimport minimatch from 'minimatch';\nimport path from 'path';\n\nexport default function getFiles(fromPath, exclude = []) {\n  const files = recursiveReadSync(fromPath)\n    .map(p => p.substr(fromPath.length + 1)) // get files relative to fromPath\n    .filter(file =>\n      exclude.every(excluded =>\n        !minimatch(file, path.join(excluded), { dot: true })\n      )\n    )\n    .map(file => `${fromPath}/${file}`);\n  return files;\n}\n"]}